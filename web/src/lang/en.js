export default {
  schedule: 'Schedule',
  newSchedule: 'New Schedule',
  deleteSchedule: 'Delete Schedule',
  editSchedule: 'Edit Schedule',
  backup: 'Backup Project',
  downloadTheProjectBackupFile: 'Download the project backup file (in json)',
  restoreProject: 'Restore Project...',
  incorrectUsrPwd: 'Incorrect login or password',
  askDeleteUser: 'Do you really want to delete this user?',
  askDeleteTemp: 'Do you really want to delete this template?',
  askDeleteProj: 'Do you really want to delete this project?',
  askDeleteTMem: 'Do you really want to delete this team member?',
  askDeleteSchedule: 'Do you really want to delete this schedule?',
  edit: 'Edit',
  nnew: 'New',
  username: 'Username',
  username_required: 'Username is required',
  dashboard: 'Dashboard',
  history: 'History',
  activity: 'Activity',
  settings: 'Settings',
  signIn: 'Sign In',
  password: 'Password',
  changePassword: 'Change password',
  editUser: 'Edit User',
  newProject: 'New Project',
  close: 'Close',
  newProject2: 'New Project...',
  task: 'Task #{expr}',
  youCanRunAnyTasks: 'You can run any tasks',
  youHaveReadonlyAccess: 'You have read-only access',
  taskTemplates: 'Task Templates',
  darkMode: 'Dark Mode',
  team: 'Team',
  users: 'Users',
  editAccount: 'Edit Account',
  signOut: 'Sign Out',
  error: 'Error',
  refreshPage: 'Refresh Page',
  relogin: 'Relogin',
  howToFixSigninIssues: 'How to fix sign-in issues',
  firstlyYouNeedAccessToTheServerWhereSemaphoreRunni: 'Firstly, you need access to the server where Semaphore running.',
  executeTheFollowingCommandOnTheServerToSeeExisting: 'Execute the following command on the server to see existing users:',
  semaphoreUserList: 'semaphore user list',
  youCanChangePasswordOfExistingUser: 'You can change password of existing user:',
  semaphoreUserChangebyloginLoginUser123Password: 'semaphore user change-by-login --login user123 --password {makePasswordExample}',
  orCreateNewAdminUser: 'Or create new admin user:',
  close2: 'Close',
  semaphore: 'SEMAPHORE',
  dontHaveAccountOrCantSignIn: 'Don\'t have account or can\'t sign in?',
  password2: 'Password',
  cancel: 'Cancel',
  noViews: 'No views',
  addView: 'Add view',
  extraVariables: 'Extra variables',
  enterExtraVariablesJson: 'Enter extra variables JSON...',
  enterEnvJson: 'Enter env JSON...',
  dashboard2: 'Dashboard',
  ansibleSemaphore: 'Semaphore UI',
  wereSorryButHtmlwebpackpluginoptionstitleDoesntWor: 'We\'re sorry but <%= htmlWebpackPlugin.options.title %> doesn\'t work properly without JavaScript enabled. Please enable it to continue.',
  name: 'Name',
  userCredentials: 'User Credentials',
  sudoCredentialsOptional: 'Sudo Credentials (Optional)',
  type: 'Type',
  keyName: 'Key Name',
  loginOptional: 'Login (Optional)',
  usernameOptional: 'Username (Optional)',
  override: 'Override',
  useThisTypeOfKeyForHttpsRepositoriesAndForPlaybook: 'Use this type of key for HTTPS repositories and for playbooks which use non-SSH connections.',
  deleteKey: 'Delete key',
  newKey: 'New Key',
  create: 'Create',
  newTask: 'New Task',
  cantDeleteThe: 'Can\'t delete the {objectTitle}',
  theCantBeDeletedBecauseItUsedByTheResourcesBelow: 'The {objectTitle} can\'t be deleted because it used by the resources below',
  projectName: 'Project Name',
  allowAlertsForThisProject: 'Allow alerts for this project',
  telegramChatIdOptional: 'Telegram Chat ID (Optional)',
  maxNumberOfParallelTasksOptional: 'Max number of parallel tasks (Optional)',
  urlOrPath: 'URL or path',
  absPath: 'abs. path',
  branch: 'Branch',
  none: 'None',
  ssh: 'SSH',
  deleteProject: 'Delete project',
  save: 'Save',
  deleteProject2: 'Delete Project',
  onceYouDeleteAProjectThereIsNoGoingBackPleaseBeCer: 'Once you delete a project, there is no going back. Please be certain.',
  name2: 'Name *',
  title: 'Title *',
  description: 'Description',
  required: 'Required',
  key: '{expr}',
  surveyVariables: 'Survey Variables',
  addVariable: 'Add variable',
  columns: 'Columns',
  buildVersion: 'Build Version',
  messageOptional: 'Message (Optional)',
  debug: 'Debug',
  dryRun: 'Dry Run',
  diff: 'Diff',
  advanced: 'Advanced',
  hide: 'Hide',
  pleaseAllowOverridingCliArgumentInTaskTemplateSett: 'To allow overriding CLI argument in Task Template settings',
  cliArgsJsonArrayExampleIMyinventoryshPrivatekeythe: 'CLI Args (JSON array). Example: [ "-i", "@myinventory.sh", "--private-key=/there/id_rsa", "-vvvv" ]',
  started: 'Started',
  author: 'Author',
  duration: 'Duration',
  stop: 'Stop',
  forceStop: 'Force Stop',
  confirmTask: 'Confirm',
  deleteTeamMember: 'Delete team member',
  team2: 'Team',
  newTeamMember: 'New Team Member',
  user: 'User',
  administrator: 'Administrator',
  definesStartVersionOfYourArtifactEachRunIncrements: 'Defines start version of your artifact. Each run increments the artifact version.',
  forMoreInformationAboutBuildingSeeThe: 'For more information about building, see the',
  taskTemplateReference: 'Task Template reference',
  definesWhatArtifactShouldBeDeployedWhenTheTaskRun: 'Defines what artifact should be deployed when the task run.',
  forMoreInformationAboutDeployingSeeThe: 'For more information about deploying, see the',
  taskTemplateReference2: 'Task Template reference',
  definesAutorunSchedule: 'Defines autorun schedule.',
  forMoreInformationAboutCronSeeThe: 'For more information about cron, see the',
  cronExpressionFormatReference: 'Cron expression format reference',
  startVersion: 'Start Version',
  example000: 'Example: 0.0.0',
  buildTemplate: 'Build Template',
  autorun: 'Autorun',
  playbookFilename: 'Playbook Filename *',
  exampleSiteyml: 'Example: site.yml',
  view: 'View',
  cron: 'Cron',
  cronChecksNewCommitBeforeRun: 'Cron checks new commit before run',
  readThe: 'Read the',
  toLearnMoreAboutCron: 'to learn more about Cron.',
  suppressSuccessAlerts: 'Suppress success alerts',
  cliArgsJsonArrayExampleIMyinventoryshPrivatekeythe2: 'CLI Args (JSON array). Example: [ "-i", "@myinventory.sh", "--private-key=/there/id_rsa", "-vvvv" ]',
  allowCliArgsInTask: 'Allow CLI args in Task',
  docs: 'docs',
  editViews: 'Edit Views',
  newTemplate: 'New template',
  taskTemplates2: 'Task Templates',
  all: 'All',
  notLaunched: 'Not launched',
  by: 'by {user_name}',
  editTemplate: 'Edit Template',
  newTemplate2: 'New Template',
  deleteTemplate: 'Delete template',
  playbook: 'Playbook',
  email: 'Email',
  adminUser: 'Admin user',
  sendAlerts: 'Send alerts',
  deleteUser: 'Delete user',
  newUser: 'New User',
  re: 'Re{getActionButtonTitle}',
  teamMember: '{expr} Team Member',
  taskId: 'Task ID',
  version: 'Version',
  status: 'Status',
  start: 'Start',
  actions: 'Actions',
  alert: 'Alert',
  admin: 'Admin',
  role: 'Role',
  external: 'External',
  time: 'Time',
  path: 'Path',
  lastTask: 'Last Task',
  task2: 'Task',
  build: 'Build',
  deploy: 'Deploy',
  run: 'Run',
  add: 'Add',
  password_required: 'Password is required',
  name_required: 'Name is required',
  user_credentials_required: 'User credentials are required',
  type_required: 'Type is required',
  project_name_required: 'Project name is required',
  branch_required: 'Branch is required',
  key_required: 'Key is required',
  user_required: 'User is required',
  build_version_required: 'Build version is required',
  title_required: 'Title is required',
  isRequired: 'is required',
  mustBeInteger: 'Must be integer',
  mustBe0OrGreater: 'Must be 0 or greater',
  start_version_required: 'Start version is required',
  playbook_filename_required: 'Playbook filename is required',
  email_required: 'Email is required',
  build_template_required: 'Build template is required',
  Task: 'Task',
  Build: 'Build',
  Deploy: 'Deploy',
  Run: 'Run',
  ReBuild: 'Rebuild',
  ReDeploy: 'Redeploy',
  ReRun: 'Rerun',
  LeaveProject: 'Leave Project',
  AddAlias: 'Add Alias',
  LoadAlias: 'Loading aliases...',
  globalAlias: 'Available by project and global alias',
  matcher: 'Matcher',
  matchType: 'Match Type',
  newMatcher: 'New Matcher',
  matchMethod: 'Comparison Method',
  matchBodyDataType: 'Body Data Type',
  extractValue: 'Extract Value',
  newExtractedValue: 'New Extracted Value',
  extractedValueSource: 'Value Source',
  matchKey: 'Key',
  matchValue: 'Value',
  matchOn: 'Match on',
  runners: 'Runners',
  newRunner: 'New Runner',
  enabled: 'Enabled',
  scheduleNextRun: 'Next run',
  maxNumberOfParallelTasks: 'Maximum parallel tasks',
  runnerUsage: 'Usage:',
  runnerDockerCommand: 'Docker:',
  runnerToken: 'Token:',
  editRunner: 'Edit Runner',
  deleteRunner: 'Delete Runner',
  newRunnerToken: 'New Runner',
  askDeleteRunner: 'Do you really want to delete runner {runner}?',
  projectRestoreResult: 'Project restore results',
  projectWithNameRestored: 'Project {projectName} successfully restored.',
  template: 'Template',
  aliasUrlCopied: 'The alias URL has been copied to the clipboard.',
  yes: 'Yes',
  activeTasks: 'Active Tasks',
  taskLocation: 'Location',
  empty: 'Empty',
  noValues: 'No values',
  addArg: 'Add Arg',

  status_success: 'Success',
  status_failed: 'Failed',
  status_stopped: 'Stopped',
};
